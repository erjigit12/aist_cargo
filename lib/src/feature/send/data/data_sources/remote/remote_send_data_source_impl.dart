import 'dart:convert';
import 'dart:developer';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:aist_cargo/injection_container.dart';
import 'package:aist_cargo/src/feature/feature.dart';
import 'package:aist_cargo/src/core/core.dart';
import 'package:dartz/dartz.dart';
import 'package:dio/dio.dart';

class RemoteSendDataSourceImpl implements RemoteSendDataSource {
  @override
  Future<Either> isSubscribed(CreateDeliveryModel sendModel) async {
    try {
      SharedPreferences storage = await SharedPreferences.getInstance();
      var accessToken = storage.getString('accessToken');
      var id = storage.getInt('id');

      log("‚úÖ Access Token: $accessToken");
      log("‚úÖ ID: $id");

      final response = await sl<DioClient>().post(
        '${ApiConst.isSubscription}/sendings/createTrue',
        options: Options(
          headers: {
            'accept': '*/*',
            'Authorization': 'Bearer $accessToken',
            'Content-Type': 'application/json',
          },
        ),
        data: sendModel.toJson(),
      );

      if (response.statusCode == 200 || response.statusCode == 201) {
        try {
          var jsonResponse = jsonEncode(response.data);
          log('üì© –°–µ—Ä–≤–µ—Ä–¥–∏–Ω –∂–æ–æ–±—É (JSON): $jsonResponse');
        } catch (jsonError) {
          log('üö® –°–µ—Ä–≤–µ—Ä–¥–∏–Ω –∂–æ–æ–±—É–Ω JSON –∫—ã–ª—ã–ø –æ–∫—É–π –∞–ª–≥–∞–Ω –∂–æ–∫–º—É–Ω: ${response.statusCode}');
          throw Exception(
              "Server response is not a valid JSON: ${response.data}");
        }
      }

      final createSend = CreateDeliveryModel.fromJson(response.data);

      return Right(createSend);
    } on DioException catch (e) {
      log('‚ùå –°–µ—Ä–≤–µ—Ä –∫–∞—Ç–∞ –±–µ—Ä–¥–∏: ${e.response ?? e.message}');
      throw Exception('Failed to create send: ${e.response}');
    } catch (e) {
      log('‚ùå –ñ–∞–ª–ø—ã –∫–∞—Ç–∞: $e');
      throw Exception('Unexpected error: $e');
    }
  }

  @override
  Future<Either<String, CreateDeliveryModel>> createSend(
      CreateDeliveryModel send) async {
    try {
      SharedPreferences storage = await SharedPreferences.getInstance();
      var accessToken = storage.getString('accessToken');

      log("‚úÖ Access Token: $accessToken");

      final response = await sl<DioClient>().post(
        ApiConst.createSendings,
        options: Options(
          headers: {
            'accept': '*/*',
            'Authorization': 'Bearer $accessToken',
            'Content-Type': 'application/json',
          },
        ),
        data: send.toJson(),
      );

      log('üì© –°–µ—Ä–≤–µ—Ä–¥–∏–Ω –∂–æ–æ–±—É: ${response.data}');

      if (response.statusCode == 200 || response.statusCode == 201) {
        final responseData = response.data;
        if (responseData is Map<String, dynamic>) {
          final createdDelivery = CreateDeliveryModel.fromJson(responseData);
          return Right(createdDelivery);
        } else {
          return const Left("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞");
        }
      } else {
        return const Left("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
      }
    } on DioException catch (e) {
      log('‚ùå Dio –∫–∞—Ç–∞: ${e.response?.data ?? e.message}');
      return Left(e.response?.data?['message'] ?? '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    } catch (e) {
      log('‚ùå –ñ–∞–ª–ø—ã –∫–∞—Ç–∞: $e');
      return Left('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
    }
  }
}
