import 'dart:developer';

import 'package:aist_cargo/injection_container.dart';
import 'package:aist_cargo/src/core/core.dart';
import 'package:aist_cargo/src/feature/feature.dart';
import 'package:dartz/dartz.dart';
import 'package:dio/dio.dart';

class RemoteUserDataSourceImpl implements RemoteUserDataSource {
  @override
  Future<Either> getUserData(int id) async {
    try {
      final response = await sl<DioClient>().get(
        '${ApiConst.userProfile}/$id',
      );

      log('–ú–∞–∞–ª—ã–º–∞—Ç –∫–µ–ª–¥–∏: ${response.data}');

      return Right(response);
    } on DioException catch (e) {
      throw Exception(
          'Failed to get user data: ${e.response?.data ?? e.message}');
    }
  }

  @override
  Future<Either> updateUserData(UserModel userModel) async {
    try {
      final response = await sl<DioClient>().put(
        '${ApiConst.userUpdate}/${userModel.id}',
        data: userModel.toMap(),
      );

      log('üì© –ñ”©–Ω”©—Ç“Ø–ª–≥”©–Ω –º–∞–∞–ª—ã–º–∞—Ç: ${userModel.toMap()}');
      log('üì© –°–µ—Ä–≤–µ—Ä–¥–∏–Ω –∂–æ–æ–±—É (data): ${response.data}');
      log('üì© –°–µ—Ä–≤–µ—Ä–¥–∏–Ω –∂–æ–æ–±—É (statusCode): ${response.statusCode}');

      return Right(response);
    } on DioException catch (e) {
      log('‚ùå –ö–∞—Ç–∞ –∫–µ—Ç—Ç–∏: ${e.response?.data}');
      log('‚ùå –ö–∞—Ç–∞ —Å—Ç–∞—Ç—É—Å –∫–æ–¥—É: ${e.response?.statusCode}');
      log('‚ùå –ö–∞—Ç–∞ —Ç–µ–∫—Å—Ç–∏: ${e.message}');

      return Left(Exception('–°–µ—Ä–≤–µ—Ä–¥–µ–Ω –∫–∞—Ç–∞ –∂–æ–æ–ø –∫–µ–ª–¥–∏!'));
    }
  }
}
