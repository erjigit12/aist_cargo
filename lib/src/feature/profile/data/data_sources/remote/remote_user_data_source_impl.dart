import 'dart:developer';
import 'dart:io';

import 'package:aist_cargo/injection_container.dart';
import 'package:aist_cargo/src/core/core.dart';
import 'package:aist_cargo/src/feature/feature.dart';
import 'package:dartz/dartz.dart';
import 'package:dio/dio.dart';
import 'package:shared_preferences/shared_preferences.dart';

class RemoteUserDataSourceImpl implements RemoteUserDataSource {
  @override
  Future<Either> getUserData() async {
    SharedPreferences storage = await SharedPreferences.getInstance();
    var id = storage.getInt('id');

    try {
      final response = await sl<DioClient>().get(
        '${ApiConst.userProfile}/$id',
      );

      log('–ú–∞–∞–ª—ã–º–∞—Ç –∫–µ–ª–¥–∏: ${response.data}');

      return Right(response);
    } on DioException catch (e) {
      throw Exception(
          '–ú–∞–∞–ª—ã–º–∞—Ç—Ç—ã –∞–ª—ã–ø –∫–µ–ª—É—É–¥–æ –∫–∞—Ç–∞ –∫–µ—Ç—Ç–∏: ${e.response?.data ?? e.message}');
    }
  }

  @override
  Future<Either> updateUserData(UserModel userModel) async {
    SharedPreferences storage = await SharedPreferences.getInstance();
    var id = storage.getInt('id');

    try {
      final response = await sl<DioClient>().put(
        '${ApiConst.userUpdate}/$id',
        options: Options(
          headers: {
            'accept': '*/*',
            'Content-Type': 'application/json',
          },
        ),
        data: userModel.toJson(),
      );

      log('üì© –ñ”©–Ω”©—Ç“Ø–ª–≥”©–Ω –º–∞–∞–ª—ã–º–∞—Ç: ${userModel.toJson()}');
      log('üì© –°–µ—Ä–≤–µ—Ä–¥–∏–Ω –∂–æ–æ–±—É (data): ${response.data}');
      log('üì© –°–µ—Ä–≤–µ—Ä–¥–∏–Ω –∂–æ–æ–±—É (statusCode): ${response.statusCode}');

      return Right(response);
    } on DioException catch (e) {
      log('‚ùå –ö–∞—Ç–∞ –∫–µ—Ç—Ç–∏: ${e.response?.data}');
      log('‚ùå –ö–∞—Ç–∞ —Å—Ç–∞—Ç—É—Å –∫–æ–¥—É: ${e.response?.statusCode}');
      log('‚ùå –ö–∞—Ç–∞ —Ç–µ–∫—Å—Ç–∏: ${e.message}');

      return Left(Exception('–°–µ—Ä–≤–µ—Ä–¥–µ–Ω –∫–∞—Ç–∞ –∂–æ–æ–ø –∫–µ–ª–¥–∏!'));
    }
  }

  @override
  Future<String> uploadImage(File imageFile) async {
    final fileSizeMB = imageFile.lengthSync() / (1024 * 1024);
    if (fileSizeMB > 10) {
      // –õ–∏–º–∏—Ç Cloudinary –æ–±—ã—á–Ω–æ 10-20MB
      throw Exception('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ($fileSizeMB MB). –ú–∞–∫—Å–∏–º—É–º: 10MB');
    }
    try {
      // –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      final compressedFile = await compressImage(imageFile);
      log('Compressed size: ${compressedFile.lengthSync() ~/ 1024} KB');

      final formData = FormData.fromMap({
        'file': await MultipartFile.fromFile(
          compressedFile.path,
          filename: 'upload_${DateTime.now().millisecondsSinceEpoch}.jpg',
        ),
      });

      final response = await sl<DioClient>().post(
        ApiConst.cloudinaryUpload,
        data: formData,
        options: Options(
          headers: {'Content-Type': 'multipart/form-data'},
          validateStatus: (status) => status! < 500,
        ),
      );

      if (response.statusCode == 413) {
        throw Exception('–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB');
      }
      return response.data['secure_url'];
    } catch (e) {
      log('Upload error: $e');
      rethrow;
    }
  }
}
